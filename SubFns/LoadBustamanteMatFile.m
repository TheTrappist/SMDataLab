function handles = LoadBustamanteMatFile(handles, path, filename)
% Reads data from a new file given by filename at the given path and saves 
% all the appropriate new variables to the handles structure. This file
% specifically loads files of the .mat format as generated by the
% Bustamante Lab traps
%
% Written by Vladislav Belyy
% Created on 10/07/2013
% Last modified on 10/07/2013


%% Prepare for data reading

tic % debug purposes only - optimizing load time

% Turn off filtering
set(handles.FilterData,'string','Filter/Decimate Data?')
handles.display.filtered = 0;

handles = ResetStepFitter(handles);

% Reset line fitter
handles.lineVector = 0;
set(handles.FitLine, 'String', 'FIT');
set(handles.SaveLineFit, 'Visible', 'off');

DataFilePath=strcat(path,filename);
handles.currentPath=DataFilePath;





%% Read data

load(DataFilePath);


rawData = double(ContourData(1).extension); % Get extension data
time = ContourData(1).time; % Get time data


%% Pull out useful parameters

handles.trackAngle = 0;
SR = 1/(time(2)-time(1)); % back-calculate the sampling rate
handles.SamplingRate = SR;
%{
ChannelLogic=WhichChannels(filename);
handles.ChLogic=ChannelLogic;

%determine number of samples in file:
firstNP=strfind(filename,'NP');
lastNP=strfind(filename,'ANG');
numSamp = str2double(filename(firstNP+2:lastNP-1));
%}

%% Convert raw data into PSD and trap signals

%Initialize variables
PSD1 = [];
PSD2 = [];
AODTrap = [];
PiezoTrap = [];


tElapsed = toc; % debug purposes only - optimizing time


set(handles.FileName,'string',filename)
set(handles.FilePath,'string',path)


% read the PSD data
handles.rawPSD1Data_X=rawData; 

% generate empty vectors for off-axis trace
handles.rawPSD1Data_Y=zeros(size(handles.rawPSD1Data_X,1),1);

% generate empty vectors for first trap position
handles.trapPositionRaw_X = zeros(size(AODTrap,1),1);
handles.trapPositionRaw_Y = zeros(size(AODTrap,1),1);


% generate empty vectors for second trap position
handles.piezoTrapPositionRaw_X = zeros(size(PiezoTrap,1),1);
handles.piezoTrapPositionRaw_Y = zeros(size(PiezoTrap,1),1);



% Set the channel indicators:
set(handles.PSD1,'Value',1);
set(handles.PSD2,'Value',0);
set(handles.AODTrapPos,'Value',0);
set(handles.PiezoTrapPos,'Value',0);

%% Save the same data in nanometers (since it's already calibrated)

% Read extension signals: creates handles.PSD1Data_Long,
% PSD1Data_Short, and handles.t

% create time axis:
handles.t=1/SR:1/SR:length(time)/SR;


% Generate rotated signal and save it to handles
handles.PSD1Data_Long = handles.rawPSD1Data_X';
handles.PSD1Data_Short = handles.rawPSD1Data_Y';


%%% Process trap position data %%%
handles.trapPosLong = zeros(1, length(handles.t));
handles.trapPosShort = zeros(1, length(handles.t));

set (handles.Recording_Type, 'Value', 1); % Fixed trap
handles.recordingType = 'Fixed trap';
handles.display.trapPosLong = 0;
handles.display.trapPosShort = 0;


% debug purposes only:
disp(['Loaded in: ', num2str(tElapsed), ' seconds']);
